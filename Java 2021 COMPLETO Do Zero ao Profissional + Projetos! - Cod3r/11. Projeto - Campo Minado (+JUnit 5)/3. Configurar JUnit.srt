1
00:00:00,490 --> 00:00:07,600
Agora nós vamos configurar o nosso projeto usando o dinheiro que é um frame aqui para você fazer aplicar

2
00:00:07,600 --> 00:00:09,710
testes dentro de um projeto Java.

3
00:00:10,180 --> 00:00:16,260
Essa questão dos testes é algo essencial é muito importante ter um parceiro nosso o vagão em que tem

4
00:00:16,270 --> 00:00:18,640
alguns cursos de testes muito legais.

5
00:00:18,640 --> 00:00:25,550
Boa parte desses cursos são voltados para Java se você procurar Techint dentro da plataforma e olhar

6
00:00:25,550 --> 00:00:31,240
lá os cursos do Wagner são cursos muito recomendados porque a gente da Golden recomenda que nós vamos

7
00:00:31,240 --> 00:00:36,080
fazer uma forma mais simples para você entender a filosofia do teste não nessa aula mas durante o capítulo

8
00:00:36,180 --> 00:00:40,630
porque eu vou estar aplicando esses testes durante a execução do nosso projeto.

9
00:00:40,660 --> 00:00:47,260
Então para isso a gente possa realmente habilitar o nosso projeto para rodar testes unitários.

10
00:00:47,310 --> 00:00:50,570
Eu vou clicar com o botão direito em cima do nosso projeto não em cima.

11
00:00:50,570 --> 00:00:57,850
Essa é a essência do nosso projeto e vou criar aqui uma nova pasta de código só os.

12
00:00:57,850 --> 00:01:03,800
Diferente de um pacote de uma classe eu vou criar uma nova pasta de código fonte assim como é a pasta

13
00:01:03,800 --> 00:01:04,830
SRC.

14
00:01:04,900 --> 00:01:07,660
Só que o nome dessa pasta eu vou chamar de teste.

15
00:01:07,660 --> 00:01:09,330
Existem vários padrões ações.

16
00:01:09,340 --> 00:01:12,700
Como você pode definir diferentes diretórios de código.

17
00:01:12,700 --> 00:01:16,560
Não vou entrar muito no mérito dependendo do tipo de projeto que você cria.

18
00:01:16,570 --> 00:01:21,310
Vai ter uma estrutura um pouquinho diferente mais aqui dentro basicamente dessa aí sim nós vamos ter

19
00:01:21,310 --> 00:01:25,920
o nosso código puro e dentro do teste nós vamos ter todos os nossos testes.

20
00:01:25,930 --> 00:01:32,730
é muito interessante você separar em duas pastas diferentes e não misturar os testes dentro do código

21
00:01:32,730 --> 00:01:33,930
da sua aplicação.

22
00:01:33,950 --> 00:01:39,010
Porque na hora que você for gerar sua aplicação pra mandar para o usuário para publicar em algum local

23
00:01:39,010 --> 00:01:41,250
você não precisa enviar os testes.

24
00:01:41,290 --> 00:01:46,960
Os testes são executados no momento que você está em desenvolvimento no momento que você tá preparar

25
00:01:46,990 --> 00:01:53,820
nossa aplicação é muito legal você rodar todos os testes antes de disponibilizar o projeto para o cliente.

26
00:01:53,860 --> 00:01:54,290
Por quê.

27
00:01:54,280 --> 00:01:59,690
Porque você garante que tudo o que você fez não gerou nenhum impacto colateral na sua aplicação.

28
00:01:59,890 --> 00:02:05,680
Mas é muito importante separar os testes do código mesmo para que você tenha uma facilidade na hora

29
00:02:05,680 --> 00:02:07,290
de gerar aplicação desleal.

30
00:02:07,390 --> 00:02:15,100
Por favor IGNOREM a parte teste e só gera a aplicação usando essa receita para isso que serve você criar

31
00:02:15,090 --> 00:02:16,510
em dois diretórios diferentes.

32
00:02:16,530 --> 00:02:21,430
E aí qual é o próximo passo para a gente configurar não basta você criar um diretório de código chamado

33
00:02:21,430 --> 00:02:21,820
teste.

34
00:02:21,820 --> 00:02:25,930
Você precisa habilitar por enquanto o nosso projeto Campo Minado.

35
00:02:25,960 --> 00:02:30,300
Ele só tem uma biblioteca que é o JRS em um lago.

36
00:02:30,460 --> 00:02:34,550
Aqui dentro nós temos toda a API do Java na extremidade string.

37
00:02:34,810 --> 00:02:39,880
Nós temos o diabo ou nós temos o scanner e tudo aquilo que a gente já usou até então está dentro do

38
00:02:39,880 --> 00:02:41,520
JRS isto é magro.

39
00:02:41,700 --> 00:02:48,190
E nesse caso não estamos usando o Java 12 aqui dizer isso a mesma coisa a gente tem basicamente o SRC

40
00:02:48,510 --> 00:02:50,840
e temos o JRS isto em um lago.

41
00:02:50,890 --> 00:02:55,940
Só que nós vamos precisar adicionar uma nova biblioteca no nosso projeto que é o melhor técnico que

42
00:02:55,960 --> 00:02:57,320
ele já traz dentro dele.

43
00:02:57,390 --> 00:02:59,530
Não precisa baixar nada na internet.

44
00:02:59,670 --> 00:03:02,130
E nesse caso a gente vai precisar fazer essa configuração.

45
00:03:02,140 --> 00:03:08,530
Então pra isso eu vou clicar com o botão direito selecionar aqui properties ou seja propriedades dentro

46
00:03:08,620 --> 00:03:13,830
da aba de propriedades do nosso projeto o próprio X fora do campo minado.

47
00:03:13,840 --> 00:03:20,590
Nós vamos selecionar o Java build PAF e você vai vim aqui onde tem um lago explicando em águas você

48
00:03:20,590 --> 00:03:24,140
tem duas possibilidades aqui você tem um módulo.

49
00:03:24,630 --> 00:03:29,190
Mas eu não quero selecionar aqui o cara selecionado de barra que é o espaço.

50
00:03:29,320 --> 00:03:32,450
Aqui eu vou clicar em adicioná la.

51
00:03:32,470 --> 00:03:38,850
Então preste atenção não clique em cima clique embarcam classe PAF aplicar e adicioná la.

52
00:03:39,080 --> 00:03:42,000
E nós vamos selecionar aí Unidos.

53
00:03:42,040 --> 00:03:46,080
O próximo passo vai ser colocado em um de 5 e.

54
00:03:46,210 --> 00:03:52,480
Feito isso eu vou finalizar uma vez o registro do diário onde 5 e chegar de baixo do Classe PF você

55
00:03:52,480 --> 00:03:54,930
pode selecionar aquilo apelei em Clouds.

56
00:03:54,940 --> 00:04:00,490
Depois de feito isso você vai ver que vai ter dois registros o JR System label que é a própria API do

57
00:04:00,490 --> 00:04:06,760
Java e nós teremos também o dia Unix 5 para a gente fazer um teste só pra ver está tudo funcionando

58
00:04:06,760 --> 00:04:15,510
eu vou criar um valor que é meu dia Unix teste isso aplicar aqui e nós vamos selecionar ao meio dia

59
00:04:15,580 --> 00:04:22,630
e Unity Jupiter teste ou seja que a versão 5 do dia é onde é mais nova e eu vou selecionar para seu

60
00:04:22,630 --> 00:04:33,050
pacote XY br Um ponto com ponto com o ponto sem mim que é o nome do nosso projeto e eu vou colocar aqui

61
00:04:33,070 --> 00:04:38,150
uma classe chamada só teste depois a gente vai excluir essa classe aqui pra finalizar.

62
00:04:38,500 --> 00:04:43,960
Então feito isso nós temos aqui o nosso teste para executar um teste basta você clicar aqui no botão

63
00:04:43,960 --> 00:04:49,840
de execução ele vai entender que se trata de Jundiaí onde ele apareceu aqui uma barrinha bem meio dizem

64
00:04:49,840 --> 00:04:56,370
Nós é que tem um teste não aconteceu nenhum erro esse erro que significa que houve uma falha na execução

65
00:04:56,380 --> 00:05:04,110
alguma coisa não está bem configurada ou teve um erro de ação algo mais sério e quando um teste falha

66
00:05:04,410 --> 00:05:08,490
ou seja você tentou fazer alguma coisa e não deu o resultado que você esperava.

67
00:05:08,850 --> 00:05:13,680
Ele vai dizer que o teste falhou e essa máquina ficou bem melhor vai entrar um pouco mais em detalhe

68
00:05:13,770 --> 00:05:19,630
depois no processo do próprio capítulo 7 quando foi criada as funcionalidades e eu vou criar o teste

69
00:05:19,650 --> 00:05:25,770
vou falar um pouquinho do conceitual do Unix não é tanto meu foco minha aprofundar na questão do teste

70
00:05:25,800 --> 00:05:30,750
mas eu quero mostrar pra vocês que esse é um caminho muito mais interessante do que você ficar criando

71
00:05:30,750 --> 00:05:36,060
classes como meio para testar as coisas principalmente porque no nosso caso agora nós estamos dentro

72
00:05:36,060 --> 00:05:41,820
de um contexto de um projeto nesse contexto de projeto nós teremos apenas um único método no meio então

73
00:05:41,820 --> 00:05:45,530
não faz sentido ficar criando múltiplos métodos meios para testar as coisas.

74
00:05:45,900 --> 00:05:47,600
Então o que é que deu o erro aquilo.

75
00:05:47,610 --> 00:05:52,010
Na verdade eu tenho um único teste chamado Tech em maio eu posso colocar qualquer coisa.

76
00:05:52,950 --> 00:05:59,590
Por exemplo testar qualquer coisa ou então está

77
00:06:02,640 --> 00:06:15,010
se igual a 2 por então eu vou criar aqui vou colocar aqui um galo inteiro recebe mais um.

78
00:06:15,150 --> 00:06:17,430
E como é que eu posso fazer esse teste funcionar.

79
00:06:17,430 --> 00:06:23,690
Eu posso usar aqui acerte por exemplo acerte e o.

80
00:06:24,450 --> 00:06:31,110
E aí ele vai ter aqui dois parâmetros basicamente aquilo que você espera e o primeiro é aquilo que você

81
00:06:31,110 --> 00:06:34,680
realmente conseguiu a partir de algum retorno de uma função.

82
00:06:34,800 --> 00:06:40,910
A partir de alguma loja que você fez por exemplo é que existem várias possibilidades do A7 com os combates

83
00:06:40,960 --> 00:06:44,140
como chá com bambu e um deles e com índice.

84
00:06:44,280 --> 00:06:46,320
Nesse caso eu posso usar aqui o A7.

85
00:06:46,320 --> 00:06:52,290
Gostou de fazer o selecionar qualquer um que vai definir mesmo os parâmetros bons por que eu espero.

86
00:06:52,290 --> 00:06:58,370
O valor 2 é o que eu recebi foi o valor nesse caso já não tenho um teste não implementado que ele me

87
00:06:58,360 --> 00:07:00,520
mandou explicitamente falhar o teste.

88
00:07:00,560 --> 00:07:06,800
O conteúdo feito é basicamente o que eu estou fazendo é o seguinte verifique se o valor está dentro

89
00:07:06,800 --> 00:07:12,570
da variável há é exatamente o valor que eu espero a partir dos parâmetros que eu passei estão executando

90
00:07:12,570 --> 00:07:18,450
aqui você vai ver que ele vai executar o teste de forma correta e além disso mais do que você executa

91
00:07:18,450 --> 00:07:24,570
o teste de forma correta o nosso teste foi aprovado ou seja exatamente aquilo que você esperava e o

92
00:07:24,570 --> 00:07:25,680
que você conseguiu.

93
00:07:25,950 --> 00:07:31,200
O teste aqui só para mostrar um exemplo bem simples você está vendo que o nome da classe é exatamente

94
00:07:31,200 --> 00:07:37,740
o nome da classe que eu criei e o nome da função está se igual a dois há exatamente o nome da função

95
00:07:38,040 --> 00:07:38,970
que eu defendi aqui.

96
00:07:39,000 --> 00:07:44,700
Bastou eu colocar esse arroba teste para que ele pudesse entender que essa função representa um dos

97
00:07:44,700 --> 00:07:50,740
testes da sua aplicação ou seja não preciso me preocupar em ficar chamando criando o clássico método

98
00:07:50,740 --> 00:07:51,200
Men.

99
00:07:51,510 --> 00:07:55,830
Eu não posso ter mais de um metro no meio nem da classe então tem que criar uma classe para fazer cada

100
00:07:55,830 --> 00:07:56,820
um dos testes.

101
00:07:56,960 --> 00:08:04,220
Aqui não posso criar mais um teste então vou criar aqui uma outra função que macho por exemplo foi de

102
00:08:04,890 --> 00:08:14,160
testar se é igual a 3 por exemplo porque eu tenho aqui alguma outra lógica aqui o resultado é pra dar

103
00:08:14,160 --> 00:08:26,330
3 então vou fazer o Tim recebe por exemplo x coloco 2 mais dez menos sete em qualquer coisa que dê um

104
00:08:26,320 --> 00:08:32,290
restart que vai dar alguma coisa que eu espero que eu chamo aqui por exemplo um não acerte com os pra

105
00:08:32,290 --> 00:08:37,110
saber isso é igual e eu digo espere um valor três é o valor que eu recebi a partir de um determinada

106
00:08:37,110 --> 00:08:43,070
função aqui eu coloquei uma expressão fixa mais mais gente que você vai estar chamando a classe chamando

107
00:08:43,070 --> 00:08:48,540
a função e recebendo um retorno ou esperando uma exceção acontecer tá certo.

108
00:08:48,540 --> 00:08:54,810
E aí salvando aqui seu executá los vai perceber que irá continuar apenas um teste porque aí vai continuar

109
00:08:54,810 --> 00:09:01,820
o teste porque eu não marquei essa promoção Eu não marquei esse método é melhor dizendo roubando então

110
00:09:01,820 --> 00:09:09,930
colocando aqui a arroba TX e agora sim eu vou ter dois testes e um deles falhou coloquei dois mas daí

111
00:09:10,010 --> 00:09:16,350
se deu 12 em menos sete não vai dar um estalo 3 então pra dar ao Estado 3 já que eu tenho uns 12 até

112
00:09:16,380 --> 00:09:22,320
que diminui por 9 e agora sim eu tenho o valor que eu espero certo então foi tudo friamente calculado

113
00:09:22,320 --> 00:09:22,970
pra daí.

114
00:09:22,980 --> 00:09:29,100
Agora a gente acertar o nosso teste então o problema não era o teste o teste estava certo eu estava

115
00:09:29,100 --> 00:09:35,360
realmente querem esperar um Halo 3 mas o meu cálculo a minha expressão estava errada eu era pra funcionar

116
00:09:35,670 --> 00:09:40,170
aqui é um exemplo de teste que não tem absolutamente nada a ver com o nosso projeto mas só pra você

117
00:09:40,170 --> 00:09:46,920
entender que faz muito mais sentido testar minha aplicação dessa forma entendendo que determinadas coisas

118
00:09:46,920 --> 00:09:50,530
tem que dar os valores esperados a eu quero que uma função.

119
00:09:50,670 --> 00:09:56,460
Se eu passar esse valor elas gerem uma recessão e isso pode ser algo que você espera como resposta a

120
00:09:56,460 --> 00:10:01,860
partir de determinado parâmetro e tudo isso a gente vai acabar aplica na prática dentro do nosso projeto

121
00:10:01,860 --> 00:10:09,960
então nós já temos um projeto novo nós já temos um projeto com um pacote que é um pacote mais aderente

122
00:10:09,960 --> 00:10:15,110
àquilo que você vai encontrar empresas está certo colocando o nome da empresa o nome do projeto com

123
00:10:15,120 --> 00:10:21,540
seu sub pacotes tendo uma paciente de teste que tem também o mesmo nome da empresa e aqui dentro a gente

124
00:10:21,540 --> 00:10:26,210
vai ter colocado dentro do nosso teste também os mesmos pacotes por exemplo.

125
00:10:26,400 --> 00:10:32,790
Vou criar aqui um pacote chamado modelo eu não vou testar as estações mas eu vou criar um pacote chamado

126
00:10:32,790 --> 00:10:37,800
modelo que é o pacote que eu vou colocar pra cada classe do modelo eu vou criar uma classe de teste

127
00:10:37,800 --> 00:10:42,060
para gente da Estácio funcionalidades e aí sim a gente tem interesse em estar em um caminho certo ou

128
00:10:42,180 --> 00:10:42,830
não.

129
00:10:42,840 --> 00:10:47,160
Então fui por aqui com nosso projeto configurado para os nossos testes unitários.

130
00:10:47,160 --> 00:10:52,560
Durante o nosso projeto eu vou estar explicando um pouco mais o conceitual como é que você pode testar

131
00:10:52,560 --> 00:11:00,330
as funcionalidades de forma mais isolada não vou entrar no mérito de testes de integração baixo unitário

132
00:11:01,390 --> 00:11:06,460
aqui coisas que são assuntos especificamente de um curso de teste mas a gente vai usar na prática o

133
00:11:06,460 --> 00:11:08,850
teste que eu acho uma experiência muito legal.

134
00:11:08,860 --> 00:11:11,020
A próxima aula continua Eu espero lá.
