F125 - 
Introdução ao Módulo
Paradigma de programação
•Base do Java
►Herança
►Polimorfismo
►Encapsulamento
►Abstração
►Classe abstrata
►Interface

conceitos Sólidos;

F126 -
•Composição
►Dependencias de classes;
►Relacionamento entre classes;
►Alta depedencia de classes;
►Manutenbilidade;
►Reutilizar códigos;

F127 - 
•Relação 1 para 1
►Relação unidirecional;
►Compor um objeto a partir de outro objetos;
►Responsável por gararntir que anomalias acontençam é a própria Classe;
►Relação bidirecional;

F128 -
•Relação 1 para N;
►Relação bidirecional;

F129 - 
•Relação N para N;

F130 - 
•Desafio;
F131 - 
•Desafio Resposta;
►falhei no desafio;
►comecei pelo produto e terminaria no cliente, ele por sua vez começou por cliente  e foi até produto;
►entendi errado o coceito do projeto, ele quera apenas 1 cliente várias compras, eu já imaginei que fosse pra criar mais de um cliente, cada um com uma compra;

F132 - 
►Paradigmas; estruturar o pensamento e abstrair o mundo real para o software;
►Programação macarrônica;
►Procedural - ator principal é a função;
►Orientação a Objetos - ator principal é o objetos;
►Funcional;

F133 - 
•Pilares da orientação a objetos;
►conceitos;
►Encapsulamento - processos internos do sistemas;
►Herança - Reuso de código;
►Polimorfismo - Acoplar conceitos genericos a várioas aplicações, posso dizer que cachorro é um animal, que gato é um animal, pq o conceito animal é polimorfico;
► Abstração - simplificar o mundo real para o software;

F134 - 
•Encapsulamento;
►Privado;
►Público;
►"Efeito Dominó";
►Baixo grau de dependência e complexidade;
►Modificadores de acesso(em metodos e atributos;) -
►►Public - pode ser acessado por qualquer classe do sistema;
►►►Protected - pode ser acessado desde que ele seja herdado, trasmitido por herança;
►►►►Package(default) - só pode ser acessado por classes do mesmo pacote;
►►►►►Private - o mais restrito, só pode ser acessado de dentro da própria classe;

F135 - 
•Herança;
►Reuso de código;

►Composição("tem uma..."); 
►►Priorizar em relação a herança, por ser mais flexível; 
Ex:
carro tem um motor...
carro tem portas...
casa tem uma cozinha..

►Herança("é uma..."); 
►►Evitar uso execivo, e muitas hierarquias de heraça;
Ex:
civic é um carro...
Gato é um mamífero...
maçã é uma fruta...

►Super Classe(mais genérico, mais abrangente); 
►Sub Classe(mais específica);

►extends;

F136 - 
•Polimorfismo;
►Estático - sobrecarga, três metodos com mesmo nome operando de manera diferente;
►Dinâmico - tem que haver herança;
Civic c = new Civic(); - Estanciando a classe carro;
Carro c = new Civic(); - estanciar um carro especifico, e atribuiu à classe carro, possível através da herança;
c = new Ferrari(); - atribuindo Ferrari a classe carro;

Usando o tipo Generico, pode se atribui formas diferentes, usando exemplo acima, haverá momentos que o carro terá forma de Civic e outros forma de Ferrari;

void estacionar(Civic c){...}; - aceita exclusivo Civic e ou que herda algo no Civic;

void estacionar(Carro c){...}; -  aceita qualquer Carro(civic, ferrari, uno ....); + genérico;

F137 - 
•Abstração;
►simplificação;
►Filtrar o que é relevante para o sistema;

F138 - 
ENUM - outro tipo de estrutura que pode ser criada além da classe;

F139 - 
•Herança na prática;
►transmissão de atributos e comportamnetos pra classe filha;
Math.abs(); valor absoluto, caso uma soma reslte em '-1' ele modifica para 1;
►us do extends;


______________________________________________________________________________________________________________________