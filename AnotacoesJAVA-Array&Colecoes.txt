F107 - 
Introdução ao Modulo
Fundamentos -> Arrays e Collections;

F108 - 
Array
Lista numerada;
Estrutura de tamanho fixo, antes de gera-lo precisa informar o tamanho; estrutura estatica; passivel de realocar as informações array maiores, mas não aumentar o array atual;
estrutura unidimensional;
homogenêo -> um array tem um só tipo de dado, array de interiros, array de doubles;

double [] a = new double [6]; -> reservo um espaço na memoria informando ser um array (double [] a) que receberá(=) uma construção de arrays de decimais com 6 posições(new double [6]);

a[2] = 10; inserir o valor 10.0 na posição 2 do array a[];
a[0] = 9.2;

System.out.println(a[5]); acessar a quinta posição do array;

acesso a notação.
a._____  -> habilitado;
a[2].    -> não habilitado;

não existe matriz em JAVA, então para simular a mesma, se usa Array dentro de array;

double [][] -> array bidimensional;
double [][][] -> array tridimensional;
e assim por diante....

F109 - 
Praticando os conceitos de array;
.length -> se tratando de arrays é um atributo;

F110 - 
Foreach; -> para cada;
estrutura do foreach;
for (double nota : notas) {//foreah
	System.out.print(nota + " ");			
}

F111 - 
Desafio Array;
F112 - 
Sucesso - Desafio Array;
'ctrl shift o' -> limpar advertência;

F113 - 
Matriz;
retorno de arrays com foreach;

F114 - 
conceito de igualdade dentro de objetos no JAVA;
difrença entre procurar igualdade entre dados e endereço de memoria;
metodo presente em todos os objetos e Classes(instanciadas) em JAVA -> .equals;
equals / hashcode
conjunto -> hashset

equals -> retorna boolean(true ou false);
hashcode -> retorna int;

como equals é de certa forma lento ao realizar buscas;
é usado primeiro o hashcode para diminuir a quatidade de resultados de buscar usando uma caracteristica mais especifica;
e o que o hashcode separou será aplicado o equals para dar acabemento e precisão a busca;

equals <-> hashcode

F115 - 
equals na prática;
instanceof
hashcode ficará para o fim do módulo;

F116 - 
conceitalização de collections;
estrutura de como organizar os dados;
tipos:

SET- se assemelha a um conjunto;
►Não ordenado (por padrão);
►Não indexado;
►Não aceita repetição

LIST- se assemelha a uma lista (array)
►Idexada;
►Aceita repetição;

MAP- se assemelha uma tabela de duas colunas; a chave é tipo SET e valor é tipos LIST;
►Chave/Valor;
►Chave não aceita repetição;
►Valor aceita repetição;

QUEUE - fila
►Implementa fila;
►First In / First Out (FIFO);

STACK-
►Implementa pilha(Stack);
►Last In / First Out (LIFO)

add - adiciona dados;
size() - metodo de tamanho da collection;

F117 -
SEt na prática;
SET- conjunto 
►Pode ser heterogêneo;(multiplos tipos);
►Pode ser homogêneo;(mono tipos);
►Não aceita obj duplicados;(objets com o mesmo equals ou mesmo hashcode);
►Pode ser ordenado;
►Não é indexado;
♦HashSet;

como calar as advertências;

F118-
SET homogêneo;
Set<String> lista =  new HashSet<String>(); ->  tradicional
Set<String> lista =  new HashSet<>();  -> operador diamond
SortedSet<String> listaAprovados =  new TreeSet<>();//respeita a ordem de adição;
anotação 'generics';

F119 - 
LIST na prática;
►Pode ser heterogêneo;(multiplos tipos);
►Pode ser homogêneo;(mono tipos);
►Aceita obj duplicados;(objets com o mesmo equals ou mesmo hashcode);
►É ordenado;
►É indexado;

ArrayList<Usuario> lista = new ArrayList<>();
List<Usuario> lista = new ArrayList<>();

F120 - 
Queue(FILA) na prática;
Queue<String> fila = new LinkedList<>();

//.add() & .offer() -> maneiras de inserção para queue;
fila.add("Ana");// caso falhe ela expressa erro na execução
fila.offer("Bia");// caso falhe retorna false; 
//a diferença é o comportamento quando a fila está cheia;


//.peek() & .element() -> obter o próximo elemento da fila(sem remover);
System.out.println(fila.peek());//se estiver vazia retorna null;
System.out.println(fila.element());//se estiver vazia lanã uma exception(exceção);
//a diferença é o comportamento quando a fila está vazia;


//.poll() & .remove() -> obter e remover o primeiro elemento da fila 
System.out.println(fila.poll());//retorna o primeiro elemento já removendo ele; caso a fila esteja vazia retorna null;
//System.out.println(fila.remove());//retorna o primeiro elemento já removendo ele; caso a fila esteja vazia expressa erro(exception);
//a diferença é o comportamento quando a fila está vazia;

//fila.size();//tamanho da fila;
//fila.clear();//limpar a fila;
//fila.isEmpty();//verificar se está vazia;
//fila.contains();//verificar se contém na fila;

F121 - 
Stack(pilha) na prática 
//básicamente os mesmo métodos do Fila porém se baseando no ultimo elemento da lista;
// offer -> push (pata inserção) / inclusão dp pop() (para exclusão);

F122 - 
Map na prática; -> estrutura bastante dinamica n momento da montage;
java.util.Map<Integer, String> usuarios = new HashMap<Integer, String>();
java.util.Map<Integer, String> usuarios = new HashMap<>();

usuarios.put(1, "Anderson");//inserção no Map;
System.out.println(usuarios.keySet());//retornaas chaves; ->[1, 2, 3, 4]
System.out.println(usuarios.values());//retorna os valores; ->[Anderson, Andrey, Gisele, Isabel]
System.out.println(usuarios.entrySet());//retorna as chaves com os valores; ->[1=Anderson, 2=Andrey, 3=Gisele, 4=Isabel]

System.out.println(usuarios.get(2));//traz o valor a partir da chave;
System.out.println(usuarios.remove(1));//remover a partir da chave
System.out.println(usuarios.remove(4 ,"Teresinha"));//remover por chave e valor, caso não seja verdadeira a combinação retornaraá false;


System.out.println(usuarios.containsKey(3));//retorna um boolean;
System.out.println(usuarios.containsValue("Anderson"));//retorna um boolean;

System.out.println(usuarios.get(2));//traz o valor a partir da chave;

3 foreach para percorrer esse Map, pela chave, pelo valor e pelas duas colunas;

F123 - 
hashcode na prática;
**Reassistir a aula**

F124 - 
Conclusão do módulo;
programação funcional
paradigma;



______________________________________________________________________________________________________________________

